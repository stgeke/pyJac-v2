/*
kernel.c
A cog-templated skeleton for pyJac OpenCL-kernel compilation
(C) Nicholas Curtis - 2018

Global declarations for Cog:
    - compgen: path to a serialized CompilationGenerationResult instance
    that may be loaded to generate this file
*/

#include "jacobian_main.oclh"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <CL/cl.h>

#define MAX_DEVICE (16)
#define MAX_PLATFORM (16)

void JacobianKernel::compile()
{
    cl_platform_id platform_id[MAX_PLATFORM];
    cl_device_id device_id = NULL;
    cl_context context = NULL;
    cl_command_queue command_queue = NULL;
    cl_program program = NULL;
    cl_uint ret_num_platforms;
    cl_uint ret_num_devices;

    cl_int return_code;


    const char* filename[4] = { "chem_utils.ocl", "species_rates.ocl", "jacobian.ocl", "jacobian_driver.ocl" };
    const char* platform = "NVIDIA";
    const char* out_name = "jacobian.bin";
    const char* build_options = "-cl-fast-relaxed-math -cl-mad-enable -cl-std=CL1.2";

    FILE *fp;
    char* source_str[4];
    size_t source_size[4];

    /* Load kernel source code */
    for (int i = 0; i < 4; ++i)
    {
        fp = fopen(filename[i], "r");
        if (!fp) {
            printf("Kernel source: %s could not be opened.", filename[i]);
            exit(-1);
        }
        //find file size
        fseek(fp, 0L, SEEK_END);
        source_size[i] = ftell(fp);
        rewind(fp);

        //read file
        source_str[i] = (char*)malloc(source_size[i]);
        cassert(fread(source_str[i], 1, source_size[i], fp) == source_size[i], "Error reading in source strings.");
        fclose(fp);
    }

    /* Get platform/device information */
    check_err(clGetPlatformIDs(MAX_PLATFORM, platform_id, &ret_num_platforms));
    cl_platform_id pid = NULL;
    for (int i = 0; i < ret_num_platforms; ++i)
    {
        //check if intel
        char pvendor[100];
        size_t psize = 100 * sizeof(char);
        check_err(clGetPlatformInfo(platform_id[i], CL_PLATFORM_VENDOR, psize, pvendor, NULL));
        if(strstr(pvendor, platform) != NULL)
        {
            pid = platform_id[i];
            break;
        }
    }
    cassert(pid != NULL, "Platform not found");


    //get the device to compile for
    cl_uint num_devices = 1; //only need one for compilation
    check_err(clGetDeviceIDs(pid, CL_DEVICE_TYPE_ALL, num_devices, &device_id, &ret_num_devices));

    //create context
    context = clCreateContext(NULL, num_devices, &device_id, NULL, NULL, &return_code);
    check_err(return_code);

    //create queue
    command_queue = clCreateCommandQueue(context, device_id, 0, &return_code);
    check_err(return_code);

    /* Create Kernel program from the source */
    program = clCreateProgramWithSource(context, 4, (const char **)source_str, (const size_t *)source_size, &return_code);
    check_err(return_code);

    /* Build Kernel Program */
    return_code = clBuildProgram(program, num_devices, &device_id, build_options, NULL, NULL);
    if (return_code != CL_SUCCESS)
    {
          printf("OpenCL failed to build the program...\n");
    }
    size_t len;
    char *buffer;
    check_err(clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, 0, NULL, &len));
    buffer = (char*)calloc(len, sizeof(char));
    check_err(clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, len * sizeof(char), buffer, NULL));
    printf("%s\n", buffer);
    free(buffer);

    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_STATUS, sizeof(char*), NULL, &len);
    buffer = (char*)calloc(len, sizeof(char));
    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_STATUS, len * sizeof(char), buffer, NULL);
    printf("%s\n", buffer);
    free(buffer);
    check_err(return_code);

    // Get compiled binary from runtime

    //get # of programs
    size_t num_prog;
    size_t expected_progs = 1;
    check_err(clGetProgramInfo(program, CL_PROGRAM_BINARY_SIZES, sizeof(size_t), NULL, &num_prog));
    num_prog /= sizeof(size_t);
    cassert(num_prog == expected_progs, "Incorrect number of programs found.");

    //get program size
    size_t bin_size[expected_progs];
    check_err(clGetProgramInfo(program, CL_PROGRAM_BINARY_SIZES, num_prog * sizeof(size_t), bin_size, NULL));

    //get binary
    unsigned char* binary[expected_progs];
    for (int i = 0; i < expected_progs; ++i)
        binary[i] = (unsigned char*)malloc(bin_size[i]);
    check_err(clGetProgramInfo(program, CL_PROGRAM_BINARIES, sizeof(binary), binary, NULL));

    for (int i = 0; i < expected_progs; ++i)
    {
        // Then write binary to file
        fp = fopen(out_name, "wb");
        if (!fp) {
            exit(-1);
        }
        size_t bytes = bin_size[i] / sizeof(unsigned char);
        cassert(fwrite(binary[i], sizeof(unsigned char), bytes, fp) == bytes, "Error writing program binaries.");
        //close file
        fclose(fp);
        free(binary[i]);
        free(source_str[i]);
    }

    // mark compiled
    this->compiled=true;
}
